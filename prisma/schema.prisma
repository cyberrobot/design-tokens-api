// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  accounts      Account[]
  sessions      Session[]
  imports       Imports[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Imports {
  id          String       @id @unique @default(cuid())
  createdAt   DateTime     @default(now())
  file        String       @db.Text
  name        String
  description String?
  transforms  Transforms[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@index([userId])
}

model Transforms {
  id        String      @id @unique @default(cuid())
  createdAt DateTime    @default(now())
  platforms Platforms[]
  import    Imports?    @relation(fields: [importsId], references: [id], onDelete: Cascade)
  importsId String?

  @@index([importsId])
}

model Platforms {
  id           String     @id @unique @default(cuid())
  name         String
  transform    Transforms @relation(fields: [transformsId], references: [id], onDelete: Cascade)
  transformsId String
  formats      Formats[]

  @@index([transformsId])
}

model Formats {
  id          String    @id @unique @default(cuid())
  name        String
  value       String    @db.Text
  ext         String
  url         String?
  platform    Platforms @relation(fields: [platformsId], references: [id], onDelete: Cascade)
  platformsId String

  @@index([platformsId])
}
